class Solution {
  boolean bfscheck(int node,int[] color,int[][] adj)//helper function
  {
    Queue<Integer>q=new LinkedList<>();
    color[node]=1;
    q.offer(node);
    while(!q.isEmpty())
    {
      int node1=q.poll();
      for(int it:adj[node1])
      {
        if(color[it]==-1)
        {
          color[it]=1-color[node1];
          q.offer(it);
        }
        else if(color[it]==color[node1])
        {
          return false;
        }
      }
    }return true;
  }
  //-------------------------------------------------------------------
  public boolean isBipartite(int[][] graph) {
        int n=graph.length;
        int []color=new int[n];
        Arrays.fill(color,-1);
      
      for(int i=0;i<n;i++)
      {
        if(color[i]==-1)
        {
          if(!bfscheck(i,color,graph))
          {
            return false;
          }
        }
      }
     return true;
    }
}
